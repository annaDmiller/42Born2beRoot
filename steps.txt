1. Download SUDO
	-You can check whether SUDO is installed by the command "sudo -V";
	-To download the SUDO, you need to use to command "apt-get install sudo" but to do it, you need to switch to the root user;
	-To switch to the root user, run the command "su -". SU command is used to switch between users: generally you run it in the way "su username" but 
		if username isn't typed, the Linux process it in the way to switch you to the root user (default). However, this can lead to that not all the 
		bash-files are found;

2. Add the user to groups (not root one)
	-Switch to the root user;
	-Run the command "usermod -aG sudo username" to do it. -G option is used to define the group and -a option is used to add the user to the group 
		(used only with -G). After the options the name of the group is determined, and last argument is the username of the user;
	-To check which users are part of the group, the command "getent group groupname";
	-To check to which groups the user is assigned, the command "groups username" must be used;

3. Create a user42 group
	-To create the user groups, you must run the command "groupadd groupname";
	-Follow the step 2 once more to add the user to the user42 group;

4. Change of hostname (for evaluation)
	-If you need to change the hostname temporarily, you can use the command "hostname new_name". After the reboot of the system, the change will be 
		reverted back. To verify the changes, run the command "hostname";
	-If you need to change the hostname permanently, you should use the command "hostnamectl set-hostname new_name". To verify the changes, run the 
		command "hostnamectl" which shows the system information - the hostname is written in line with Static hostname (can be run only if there is 
		a systemd files; if no - "apt-get install systemd");
	-To check that the systemd is installed, run "systemctl status". If running "hostnamectl" shows an error "Failed to connect to bus...", then you
		need to activate the dbus by "systemctl start dbus". Try once more to run "hostnamectl";
	-To check the hostname after reboot, run "systemctl reboot";

5. Create a new user (for evaluation)
	-To create a new user, you should run the command "userad username";
	-To be able to log in as the new user, you must set up the user's password. It can be achieved by the command "passwd username";
	-On the step of creating user, it can be assigned to the groups with option -G after which you must list the groups to which it should be added, 
		separated by comma;
	-For temporary users, you can use the option -e to set up the expiration date of the user in the format YYYY-MM-DD. For example, 
		"useradd -e 2024-06-30 username";

6. Add the possibility for user to use "sudo" (if the step 2 is done for sudo group, then there is no general need of it)
	-To be able to use "sudo", user must be added to the list of sudoers in suders.tmp file. To open that file, run the command "sudo visudo";
	-Find the line where it is written "# User privilege specification". By default, after that line, only the root user mentioned;
	-Add your user under the root user in the format "username ALL=(ALL:ALL) ALL";
	-However, by default there is a possibility to use SUDO for users added to sudo group (see the line "# Allow members of group sudo t execute any command"); 

7. Set up the SSH server (description of SSH read in for_eval.txt)
	-To download the SSH Server, run the command "apt install openssh-server" as a root user or "sudo apt install openssh-server" as a user;
	-To check the SSH service status, use the command "systemctl status ssh". The Active line must conatin value: "active(running)" - the SSH Service 
		is enabled. If the SSH Server isn't active, you must start it with "service ssh start". To stop it, if needed, you can run "service ssh stop" 
		- it will be stopped until next reboot. To turn SSH off indefinitely, use "systemctl disable ssh";
	-To change the port for SSH Server (the default port is 22), open the file /etc/ssh/sshd_config (you can run the command "vi /etc/ssh/sshd_config",
		there will be no need to download vim). Find the line "#Port 22" and replace it with "Port 4242" without hash symbol. Do the same in the file
		/etc/ssh/ssh_config. Additionally, find the line with "PermitRootLogin ..." and set this permission to "no" that it looks like 
		"PermitRootLogin no" (remove hash symbol). Save the changes in file;
	-To update the port you need to restart the SSH server. To do it, run "service ssh restart". You can run the command "systemctl status ssh" to check
		that the port is changed: in the line with "Server listening on :: ..." there must be the port 4242 instead of 22";
	-To verify the changes of accessing for root user, run this line "ssh root@amelniko42 -p 4242". After entering the password, the output must be
		"Permission denied ...";
	
8. Install and configure Firewall for SSH server
	-To install the firewall UFW, run the command "apt-get install ufw";
	-To activate the firewall, you need to use command "ufw enable". To check the status of the firewall, you can use "ufw status numbered" - the output must be
		"Status: active";
	-To allow SSH access for Firewall via port 4242, run "ufw allow 4242";
	-To see the available streams, use the command "ufw status". There the ports will be listed as well as the level of incoming access. If there are additional
		ports besides 4242, you can remove those rules from the list: for this, run the command "ufw status numbered" to see the numbers of rules, then use
		"ufw delete [number]" specifying the number of rule which needs to be deleted;
	-Best practice is to run additionally the commands for default connections: incoming and outgoing. To set up rules for default connections, run
		"ufw default ... incoming/outgoing" - ... replace with the access rule (deny for incoming and allow for outgoing);

9. Configure the SUDO group with requirements
	-Create a directory for logging actions there, both inputs and outputs - use "su -" to return to the default directory and create a directory /var/log/sudo/;
	-To add local rules for SUDO, we need to create a separate file in /etc/sudoers.d/ directory. Create a file "sudo_config" there - next steps will describe
		changes of that file;
	-To limit authentication using sudo with 3 attempts, add the line "Defaults passwd_tries=3"
	-To create a custom message which appears after typing incorrect password, add "Defaults badpass_message="...";
	-To make the system log the sudo actions, several line must be added: "Defaults logfile="var/log/sudo/sudo_config", "Defaults log_input, log_output";
	-To enable TTY mode (When this flag is set, sudo can only run from a login session and not via other means such as cron, shell/perl/python, or cgi-bin scripts.),
		add "Defaults requiretty";
	-To set up the path, the line "Defaults secure_path="..."" can be added - it's used as PATH environment variable for the commands you run using sudo . That means, 
		when you run (e.g. sudo apt update), the system will try to look up the command apt in the directories specified in the secure_path , in the specified order;

10. Configure password policy
	-Install the password quality checking library by "apt install libpam-pwquality";
	-To set the number of days of expiration, open the /etc/login.defs file and change the value in the line with "PASS_MAX_DAYS ...";
	-To set the number of days before modification of the password, in /etc/login.defs, in line with "PASS_MIN_DAYS ..." set the value 2;
	-To set the number of days to receive the warning message, in /etc/login.defs, in the line with "PASS_WARN_AGE ..." check that the value is 7;
	-Previous 3 rules must be set manually for the root user. Run the command "chage -l root" to check current settings. Use the command "chage -m 2 root" and
		"chage -M 30 root" for the settings (-M - for maximum days of expiration, -m - for minimum days before modification);
	-To set the minimum password length, in /etc/security/pwquality.conf, set "minlen = 10" and remove hash-symbol;
	-To set the requirements for the uppercase and lowercase symbols and digits in the password, in /etc/security/pwquality.conf set "dcredit = 1", 
		"ucredit = -1" and "lcredit = -1" removing has symbols for all lines. The value of -1 means that the password must contain AT MINIMUM 1 digit, 
		1 uppercase and 1 lowercase symbols;
	-To set the limit for number of consecutive identical chars, in /etc/security/pwquality.conf set "maxrepeat = 3" removing hash symbol;
	-To restrict usage of username in password, in /etc/security/pwquality.conf remove has symbol on line with "usercheck = 1";
	-To set the restriction of how much characters in the new password must not be present in the old one, in /etc/security/pwquality.conf set "difok = 7".
		Note that root is not asked for an old password so the checks that compare the old and new password are not performed so this rule isn't applied for
		root user automatically;
	-To make the root password be aligned with the policy, in /etc/security/pwquality.conf remove hash symbol in line with "enforce_for_root";

11. Connect to virtual machine via SSH
	-Set up the port forwrding to be able to connect via 4242 port: in VirtualMachine app for your VM click on Settings -> open the settings of Network ->
		-> unfold the Avanced section -> click on Port forwarding -> Add new port with Host Post equal to 4241 and Guest Post equal to 4242 (usually both values
		must be equal but if you are trying to connect from school, 4242 port is booked by our school);
	-To connect via SSH from our Terminal, use the command "ssh <user>@localhost -p 4242" where <user> - username of the user in VM which we are trying to
		log in under;

12. Check of SUDO logs
	-As the user (not root), run any command with "sudo ...";
	-Switch to root user and check the content of the log /var/log/sudo/sudo_config - the run by user command must be listed in the log;

13. Script
	-Move to the directory /usr/local/bin and create there file "monitoring.sh". After that, open the file;
	-Add the standard line #!/bin/bash to make the file a script;
	-The command to retrieve architecture information and kernel - "uname -a" (print system information; -a - print all info);
	-The command to take the info about the number of physical cores - "cat /proc/cpuinfo | grep "physical id" | uniq | wc -l"
		(cat - to open the file with logical CPU with a unique processor number; grep - to list only the lines with the mentioned string;
		uniq - the shorten the list for only unique lines; wc -l - to show the amount of newlines in the list);
	-The command to take the info about the number of virtual cores - 